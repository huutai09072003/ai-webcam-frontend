import React, { useState } from 'react';

import axios from 'axios';

// ƒê·ªãnh nghƒ©a c√°c nh√£n c√≥ th·ªÉ c√≥ trong ƒë·ªëi t∆∞·ª£ng advice
type Label = "METAL" | "PAPER" | "GLASS" | "PLASTIC" | "BIODEGRADABLE" | "CARDBOARD";

// D·ªØ li·ªáu l·ªùi khuy√™n cho m·ªói nh√£n
const advice: Record<Label, { title: string; description: string; action: string; extraInfo: string }> = {
  METAL: {
    title: "Metal (Kim lo·∫°i)",
    description: "Kim lo·∫°i nh∆∞ nh√¥m, th√©p c√≥ th·ªÉ t√°i ch·∫ø ƒë·ªÉ gi·∫£m √¥ nhi·ªÖm v√† ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng. H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ t√°ch ch√∫ng kh·ªèi c√°c v·∫≠t li·ªáu kh√°c tr∆∞·ªõc khi t√°i ch·∫ø.",
    action: "H√£y ƒë∆∞a c√°c v·∫≠t li·ªáu kim lo·∫°i nh∆∞ lon n∆∞·ªõc, v·ªè h·ªôp v√†o th√πng t√°i ch·∫ø kim lo·∫°i.",
    extraInfo: "L∆∞u √Ω: Kim lo·∫°i kh√¥ng b·ªã ph√¢n h·ªßy t·ª± nhi√™n, v√¨ v·∫≠y vi·ªác t√°i ch·∫ø kim lo·∫°i s·∫Ω gi√∫p gi·∫£m thi·ªÉu t√°c ƒë·ªông x·∫•u ƒë·∫øn m√¥i tr∆∞·ªùng v√† ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng trong qu√° tr√¨nh s·∫£n xu·∫•t m·ªõi."
  },
  PAPER: {
    title: "Paper (Gi·∫•y)",
    description: "Gi·∫•y c√≥ th·ªÉ t√°i ch·∫ø, nh∆∞ng c·∫ßn ph·∫£i s·∫°ch s·∫Ω. Tr√°nh c√°c gi·∫•y b·∫©n ho·∫∑c c√≥ d·∫ßu m·ª° nh∆∞ gi·∫•y ƒÉn hay pizza.",
    action: "H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n kh√¥ng b·ªè gi·∫•y b·ªã b·∫©n v√†o th√πng gi·∫•y t√°i ch·∫ø.",
    extraInfo: "Gi·∫•y t√°i ch·∫ø c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng l·∫°i trong s·∫£n xu·∫•t gi·∫•y m·ªõi. Tuy nhi√™n, gi·∫•y c√≥ d·∫ßu m·ª° (v√≠ d·ª• gi·∫•y pizza) kh√¥ng th·ªÉ t√°i ch·∫ø v√¨ ch√∫ng g√¢y kh√≥ khƒÉn cho qu√° tr√¨nh x·ª≠ l√Ω."
  },
  GLASS: {
    title: "Glass (K√≠nh)",
    description: "K√≠nh l√† v·∫≠t li·ªáu c√≥ th·ªÉ t√°i ch·∫ø v√¥ h·∫°n m√† kh√¥ng m·∫•t ch·∫•t l∆∞·ª£ng. Tuy nhi√™n, k√≠nh c·∫ßn ph·∫£i ƒë∆∞·ª£c l√†m s·∫°ch tr∆∞·ªõc khi t√°i ch·∫ø.",
    action: "H√£y ch·∫Øc ch·∫Øn r·∫±ng c√°c chai l·ªç th·ªßy tinh kh√¥ng b·ªã v·ª° tr∆∞·ªõc khi b·ªè v√†o th√πng t√°i ch·∫ø.",
    extraInfo: "K√≠nh c√≥ th·ªÉ t√°i ch·∫ø v√¥ h·∫°n m√† kh√¥ng gi·∫£m ch·∫•t l∆∞·ª£ng. H√£y t√°ch k√≠nh th·ªßy tinh kh·ªèi c√°c v·∫≠t li·ªáu kh√°c nh∆∞ nh·ª±a ƒë·ªÉ qu√° tr√¨nh t√°i ch·∫ø ƒë∆∞·ª£c hi·ªáu qu·∫£ h∆°n."
  },
  PLASTIC: {
    title: "Plastic (Nh·ª±a)",
    description: "Nh·ª±a c√≥ th·ªÉ t√°i ch·∫ø, nh∆∞ng c·∫ßn ph√¢n lo·∫°i ƒë√∫ng lo·∫°i nh·ª±a v√† l√†m s·∫°ch ch√∫ng. M·ªôt s·ªë lo·∫°i nh·ª±a kh√¥ng th·ªÉ t√°i ch·∫ø.",
    action: "H√£y ph√¢n lo·∫°i nh·ª±a theo lo·∫°i v√† l√†m s·∫°ch ch√∫ng tr∆∞·ªõc khi b·ªè v√†o th√πng t√°i ch·∫ø.",
    extraInfo: "M·ªôt s·ªë lo·∫°i nh·ª±a c√≥ th·ªÉ t√°i ch·∫ø nh∆∞ PET ho·∫∑c HDPE, nh∆∞ng c√°c lo·∫°i nh·ª±a ph·ª©c h·ª£p (v√≠ d·ª• nh·ª±a bao b√¨ th·ª±c ph·∫©m) kh√¥ng th·ªÉ t√°i ch·∫ø v√† c·∫ßn ph·∫£i ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch."
  },
  BIODEGRADABLE: {
    title: "Biodegradable (Ph√¢n h·ªßy sinh h·ªçc)",
    description: "C√°c v·∫≠t li·ªáu c√≥ th·ªÉ ph√¢n h·ªßy sinh h·ªçc nh∆∞ th·ª±c ph·∫©m v√† ch·∫•t h·ªØu c∆° c·∫ßn ƒë∆∞·ª£c b·ªè v√†o th√πng r√°c ph√¢n h·ªßy sinh h·ªçc.",
    action: "H√£y ch·∫Øc ch·∫Øn r·∫±ng c√°c v·∫≠t li·ªáu h·ªØu c∆° kh√¥ng b·ªã l·∫´n v·ªõi c√°c v·∫≠t li·ªáu kh√¥ng th·ªÉ ph√¢n h·ªßy.",
    extraInfo: "C√°c v·∫≠t li·ªáu ph√¢n h·ªßy sinh h·ªçc s·∫Ω ph√¢n h·ªßy t·ª± nhi√™n theo th·ªùi gian. H√£y ph√¢n lo·∫°i ch√∫ng v√†o th√πng r√°c composting ƒë·ªÉ t√°i ch·∫ø th√†nh ph√¢n b√≥n h·ªØu c∆°."
  },
  CARDBOARD: {
    title: "Cardboard (Gi·∫•y c√°c t√¥ng)",
    description: "Gi·∫•y c√°c t√¥ng l√† m·ªôt v·∫≠t li·ªáu t√°i ch·∫ø r·∫•t t·ªët, nh∆∞ng c·∫ßn ph·∫£i l√†m s·∫°ch v√† lo·∫°i b·ªè m·ªçi v·∫≠t li·ªáu kh√°c nh∆∞ nh·ª±a.",
    action: "H√£y g·∫•p l·∫°i c√°c th√πng c√°c t√¥ng v√† b·ªè ch√∫ng v√†o th√πng t√°i ch·∫ø gi·∫•y c√°c t√¥ng.",
    extraInfo: "Gi·∫•y c√°c t√¥ng l√† m·ªôt trong nh·ªØng v·∫≠t li·ªáu d·ªÖ t√°i ch·∫ø nh·∫•t. Tuy nhi√™n, n·∫øu c√≥ d∆° b·∫©n (v√≠ d·ª• nh∆∞ t·ª´ d·∫ßu m·ª°), ch√∫ng s·∫Ω kh√¥ng th·ªÉ t√°i ch·∫ø."
  }
};

const AboutTestSection: React.FC = () => {
  const [imageInput, setImageInput] = useState<string>('');
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const [resultImg, setResultImg] = useState<string>('');
  const [counts, setCounts] = useState<Record<string, number>>({});
  const [isUrlInput, setIsUrlInput] = useState<boolean>(false);
  const [file, setFile] = useState<File | null>(null);

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng t·∫£i ·∫£nh l√™n
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (!selectedFile) return;

    setFile(selectedFile);
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      setImageInput(result);
      setPreviewImage(result);
      setIsUrlInput(false);
    };
    reader.readAsDataURL(selectedFile);
  };

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const url = e.target.value.trim();
    setImageInput(url);
    setPreviewImage(url);
    setIsUrlInput(true);
    setFile(null); // reset file name n·∫øu d√πng URL
  };

  const handleSubmit = async () => {
    if (!file && (!imageInput || imageInput.trim() === '')) {
      alert('Vui l√≤ng ch·ªçn file ho·∫∑c nh·∫≠p URL ·∫£nh h·ª£p l·ªá!');
      return;
    }

    try {
      const formData = new FormData();

      if (file) {
        formData.append('file', file);
      } else if (isUrlInput && imageInput) {
        if (!imageInput.match(/^https?:\/\/.+/)) {
          alert('URL ·∫£nh kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p URL b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://');
          return;
        }
        formData.append('image_url', imageInput);
      } else if (imageInput) {
        if (!imageInput.startsWith('data:image/')) {
          alert('D·ªØ li·ªáu base64 kh√¥ng h·ª£p l·ªá!');
          return;
        }
        formData.append('image_base64', imageInput);
      }

      const res = await axios.post('http://localhost:8000/ai/predict-image', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      setResultImg(res.data.image_with_boxes);
      setCounts(res.data.counts);
    } catch (error: unknown) {
      const message = axios.isAxiosError(error)
        ? error.response?.data?.detail || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!'
        : 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!';
      console.error('L·ªói:', message);
      alert(message);
    }
  };

  return (
    <section className="mt-10 animate-fade-in bg-green-50 p-6 rounded shadow">
      <h2 className="text-xl font-bold text-green-700 mb-3">üß™ Th·ª≠ nghi·ªám AI v·ªõi ·∫£nh c·ªßa b·∫°n</h2>
      <div className="space-y-3">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Ch·ªçn file ·∫£nh</label>
          <input
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-green-100 file:text-green-700 hover:file:bg-green-200"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Ho·∫∑c nh·∫≠p URL ·∫£nh</label>
          <input
            type="text"
            placeholder="D√°n URL ·∫£nh..."
            value={isUrlInput ? imageInput : ''}
            onChange={handleUrlChange}
            className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-green-500"
          />
        </div>

        {previewImage && (
          <div className="mt-4">
            <p className="text-sm font-medium text-gray-700">Xem tr∆∞·ªõc ·∫£nh:</p>
            <img
              src={previewImage}
              alt="·∫¢nh xem tr∆∞·ªõc"
              className="mt-2 max-w-xs border border-gray-300 rounded"
              onError={() => {
                setPreviewImage(null);
                alert('Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL n√†y. Vui l√≤ng ki·ªÉm tra!');
              }}
            />
          </div>
        )}

        <button
          onClick={handleSubmit}
          className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          Nh·∫≠n di·ªán ·∫£nh
        </button>
      </div>

      {previewImage && resultImg && (
        <div className="mt-8">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div className="flex flex-col items-center">
              <p className="text-sm font-semibold text-gray-600 mb-1">üì∑ Tr∆∞·ªõc</p>
              <img src={previewImage} alt="·∫¢nh g·ªëc" className="max-w-full rounded border" />
            </div>
            <div className="flex flex-col items-center">
              <p className="text-sm font-semibold text-gray-600 mb-1">ü§ñ Sau</p>
              <img src={resultImg} alt="K·∫øt qu·∫£" className="max-w-full rounded border" />
            </div>
          </div>

          <div className="mt-6 text-sm text-gray-700">
            <h4 className="font-semibold">üì¶ K·∫øt qu·∫£ ph√¢n lo·∫°i:</h4>
            {Object.keys(counts).length > 0 ? (
              <ul className="list-disc list-inside space-y-4">
                {Object.entries(counts).map(([label, count]) => {
                  const adviceData = advice[label as Label]; // ƒê·∫£m b·∫£o label l√† m·ªôt key h·ª£p l·ªá trong advice
                  return (
                    <li key={label} className="p-5 bg-white border border-green-200 rounded-lg shadow-sm hover:shadow-lg transition-all duration-300 transform">
                      <div className="flex justify-between items-center border-b border-green-100 pb-3 mb-4">
                        <span className="text-green-800 font-semibold text-lg flex items-center">
                          <span className="bg-green-100 rounded-full p-1.5 mr-2 text-green-600">
                            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd"></path>
                            </svg>
                          </span>
                          {label}
                        </span>
                        <strong className="text-xl bg-green-600 text-white rounded-full w-8 h-8 flex items-center justify-center shadow-md">{count}</strong>
                      </div>
                      {adviceData && (
                        <div className="space-y-3">
                          <h5 className="font-semibold text-green-700 text-lg flex items-center">
                            <span className="mr-2">üå±</span>
                            {adviceData.title}
                          </h5>
                          <p className="text-gray-600 pl-2 border-l-4 border-green-300 ml-2">{adviceData.description}</p>
                          <div className="bg-green-50 p-4 rounded-md border-l-4 border-green-500 mt-4 shadow-md">
                            <p className="font-bold text-green-800">{adviceData.action}</p>
                          </div>
                          <div className="bg-blue-50 p-4 rounded-md border-l-4 border-blue-400 mt-3 shadow-md">
                            <p className="text-blue-800 text-sm"><span className="font-medium">L∆∞u √Ω:</span> {adviceData.extraInfo}</p>
                          </div>
                        </div>
                      )}
                    </li>
                  );
                })}
              </ul>
            ) : (
              <p className="text-red-600 mt-2">‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c r√°c trong ·∫£nh.</p>
            )}
          </div>
        </div>
      )}
    </section>
  );
};

export default AboutTestSection;
